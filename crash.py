import random
import time
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
import threading


class CrashGame:
    def __init__(self):
        self.multiplier = 1.0
        self.crashed = False
        self.players = {}
        self.game_history = []
        self.current_round = 0
        self.round_start_time = time.time()
        self.round_duration = 0
        self.max_multiplier = 0

    def start_new_round(self):
        self.multiplier = 1.0
        self.crashed = False
        self.current_round += 1
        self.round_start_time = time.time()
        self.round_duration = 0
        self.max_multiplier = 0
        print(f"\n=== –ù–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞ {self.current_round} ===")

    def run_round(self):
        self.start_new_round()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—á–∫—É –∫—Ä–∞—à–∞ (–ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–º—É –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–∞–∑–∏–Ω–æ)
        crash_point = self.generate_crash_point()

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Ä–∞—É–Ω–¥–∞
        start_time = time.time()
        last_update = start_time

        while not self.crashed:
            current_time = time.time()
            elapsed = current_time - start_time
            self.round_duration = elapsed

            # –û–±–Ω–æ–≤–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å (—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∫–æ–ª–µ–±–∞–Ω–∏—è–º–∏)
            if elapsed < 1.0:
                # –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç –≤ –ø–µ—Ä–≤—ã–µ —Å–µ–∫—É–Ω–¥—ã
                self.multiplier = 1.0 + (elapsed * 0.5)
            else:
                # –£—Å–∫–æ—Ä—è–µ–º —Ä–æ—Å—Ç —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
                growth_rate = min(0.1 + (elapsed * 0.01), 0.5)
                self.multiplier = self.multiplier * (1.0 + growth_rate * (current_time - last_update))

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è
            self.multiplier *= (1.0 + (random.random() * 0.02 - 0.01))

            self.max_multiplier = max(self.max_multiplier, self.multiplier)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Å—Ç–∞–ª –ª–∏ –∫—Ä–∞—à
            if self.multiplier >= crash_point:
                self.crashed = True
                self.multiplier = 0.0
                print(f"\nüí• –ö–†–ê–® –Ω–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–µ {crash_point:.2f}x! üí•")
                self.game_history.append({
                    'round': self.current_round,
                    'crash_point': crash_point,
                    'duration': elapsed
                })
                self.payout_players()
                break

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏—Å–ø–ª–µ–π –∫–∞–∂–¥—ã–µ 0.1 —Å–µ–∫—É–Ω–¥—ã
            if current_time - last_update >= 0.1:
                print(f"\r–ú–Ω–æ–∂–∏—Ç–µ–ª—å: {self.multiplier:.2f}x", end="", flush=True)
                last_update = current_time

            time.sleep(0.01)

        # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º —Ä–∞—É–Ω–¥–æ–º
        time.sleep(5)
        self.run_round()

    def generate_crash_point(self):
        # –ê–ª–≥–æ—Ä–∏—Ç–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—á–∫–∏ –∫—Ä–∞—à–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–º—É –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–∞–∑–∏–Ω–æ)
        e = 2 ** 32
        h = random.getrandbits(32)
        crash_point = (100 * e - h) / (e - h)
        crash_point = max(1.0, crash_point / 100)
        return crash_point

    def add_player(self, player_id, bet_amount):
        if player_id not in self.players:
            self.players[player_id] = {
                'bet': bet_amount,
                'cashed_out': False,
                'cashout_multiplier': 0.0
            }
            print(f"–ò–≥—Ä–æ–∫ {player_id} —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É: ${bet_amount:.2f}")

    def cash_out(self, player_id):
        if player_id in self.players and not self.players[player_id]['cashed_out']:
            self.players[player_id]['cashed_out'] = True
            self.players[player_id]['cashout_multiplier'] = self.multiplier
            print(f"–ò–≥—Ä–æ–∫ {player_id} –∑–∞–±—Ä–∞–ª –≤—ã–∏–≥—Ä—ã—à –Ω–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–µ {self.multiplier:.2f}x")

    def payout_players(self):
        for player_id, data in self.players.items():
            if data['cashed_out']:
                win_amount = data['bet'] * data['cashout_multiplier']
                print(
                    f"–ò–≥—Ä–æ–∫ {player_id} –≤—ã–∏–≥—Ä–∞–ª ${win_amount:.2f} (—Å—Ç–∞–≤–∫–∞: ${data['bet']:.2f}, –º–Ω–æ–∂–∏—Ç–µ–ª—å: {data['cashout_multiplier']:.2f}x)")
            else:
                print(f"–ò–≥—Ä–æ–∫ {player_id} –ø—Ä–æ–∏–≥—Ä–∞–ª —Å—Ç–∞–≤–∫—É ${data['bet']:.2f}")
        self.players = {}


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    game = CrashGame()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    game_thread = threading.Thread(target=game.run_round)
    game_thread.daemon = True
    game_thread.start()

    # –°–∏–º—É–ª—è—Ü–∏—è –∏–≥—Ä–æ–∫–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ —ç—Ç–æ –±—ã –¥–µ–ª–∞–ª–æ—Å—å —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
    time.sleep(1)
    game.add_player("Player1", 10.0)
    game.add_player("Player2", 5.0)

    # –ò–≥—Ä–æ–∫ 1 –∑–∞–±–∏—Ä–∞–µ—Ç –≤—ã–∏–≥—Ä—ã—à —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    time.sleep(2)
    game.cash_out("Player1")

    # –ò–≥—Ä–æ–∫ 2 –Ω–µ —É—Å–ø–µ–≤–∞–µ—Ç –∑–∞–±—Ä–∞—Ç—å –∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç –ø—Ä–∏ –∫—Ä–∞—à–µ