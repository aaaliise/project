import random
import sqlite3


class TowerGame:
    def __init__(self):
        conn = sqlite3.connect('db/project.db')
        cursor = conn.cursor()
        cursor.execute("SELECT coins FROM users where inset = 1")
        self.balance = [i[0] for i in cursor.fetchall()][0]
        self.current_floor = 0  # –¢–µ–∫—É—â–∏–π —ç—Ç–∞–∂
        self.bet_amount = 0  # –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞
        self.multiplier = 1.0  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –≤—ã–∏–≥—Ä—ã—à–∞
        self.game_active = False  # –ò–¥–µ—Ç –ª–∏ –∏–≥—Ä–∞
        self.floor_options = ['A', 'B', 'C', 'D']  # –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–≤–µ—Ä–µ–π


    def display_header(self):
        """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–≥—Ä—ã"""
        print("=== –ò–ì–†–ê '–ë–ê–®–ù–Ø' ===")
        print(f"\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {self.balance} —Ñ–∏—à–µ–∫")
        if self.game_active:
            print(f"–¢–µ–∫—É—â–∏–π —ç—Ç–∞–∂: {self.current_floor}")
            print(f"–ú–Ω–æ–∂–∏—Ç–µ–ª—å –≤—ã–∏–≥—Ä—ã—à–∞: {self.multiplier:.1f}x")
        print("======================")

    def display_rules(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã"""
        print("=== –ü–†–ê–í–ò–õ–ê –ò–ì–†–´ '–ë–ê–®–ù–Ø' ===")
        print("1. –í—ã –¥–µ–ª–∞–µ—Ç–µ —Å—Ç–∞–≤–∫—É.")
        print("2. –ù–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–∂–µ –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –¥–≤–µ—Ä—å (A, B, C –∏–ª–∏ D).")
        print("3. –ï—Å–ª–∏ —É–≥–∞–¥—ã–≤–∞–µ—Ç–µ ‚Äî –ø–æ–¥–Ω–∏–º–∞–µ—Ç–µ—Å—å –≤—ã—à–µ, –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ä–∞—Å—Ç—ë—Ç.")
        print("4. –ú–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç (–∫–æ–º–∞–Ω–¥–∞ 'Q').")
        print("5. –ï—Å–ª–∏ –æ—à–∏–±–∞–µ—Ç–µ—Å—å ‚Äî —Ç–µ—Ä—è–µ—Ç–µ —Å—Ç–∞–≤–∫—É.")
        print("6. –ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –ø–æ–¥–Ω—è—Ç—å—Å—è –¥–æ 5 —ç—Ç–∞–∂–∞ (–º–Ω–æ–∂–∏—Ç–µ–ª—å x3.5).")
        print("\n–ß–µ–º –≤—ã—à–µ —ç—Ç–∞–∂ ‚Äî —Ç–µ–º –±–æ–ª—å—à–µ –≤—ã–∏–≥—Ä—ã—à, –Ω–æ –∏ —Ä–∏—Å–∫ –≤—ã—à–µ!")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è...")

    def place_bet(self):
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏"""
        while True:
            try:
                bet = float(input(f"–°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É: "))
                if bet <= 0:
                    print("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî 1!")
                elif bet > self.balance:
                    print("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
                else:
                    self.bet_amount = bet
                    self.balance -= bet # &&&
                    self.game_active = True
                    self.current_floor = 0
                    self.multiplier = 1.0
                    break
            except ValueError:
                print("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

    def play_floor(self):
        """–ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å (–≤—ã–±–æ—Ä –¥–≤–µ—Ä–µ–π)"""
        correct_option = random.choice(self.floor_options)

        while True:
            self.display_header()
            print(f"\n–≠—Ç–∞–∂ {self.current_floor + 1}")
            print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–≤–µ—Ä—å, —á—Ç–æ–±—ã –ø–æ–¥–Ω—è—Ç—å—Å—è –≤—ã—à–µ:")
            print("A    B    C    D")

            guess = input("–í–∞—à –≤—ã–±–æ—Ä (A/B/C/D) –∏–ª–∏ 'Q' —á—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏: ").upper()

            if guess == 'Q':
                self.cash_out()
                return

            if guess not in self.floor_options:
                print("–û—à–∏–±–∫–∞! –í—ã–±–µ—Ä–∏—Ç–µ A, B, C –∏–ª–∏ D.")
                continue

            if guess == correct_option:
                # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä ‚Äî –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–∂
                self.current_floor += 1
                self.multiplier = 1.0 + (self.current_floor * 0.5)
                correct_option = random.choice(self.floor_options)

                self.display_header()
                print("\n–í–µ—Ä–Ω–æ! –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –≤—ã—à–µ...")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ—à–µ–ª –ª–∏ –∏–≥—Ä–æ–∫ –¥–æ –≤–µ—Ä—à–∏–Ω—ã (5 —ç—Ç–∞–∂)
                if self.current_floor >= 5:
                    print("\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –≤–µ—Ä—à–∏–Ω—ã –±–∞—à–Ω–∏!")
                    self.cash_out()
                    return
            else:
                # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä ‚Äî –ø—Ä–æ–∏–≥—Ä—ã—à
                self.display_header()
                print(f"\n–ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–≤–µ—Ä—å ‚Äî {correct_option}.")
                print("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ —Å—Ç–∞–≤–∫—É!")
                self.game_active = False
                self.bet_amount = 0
                return

    def cash_out(self):
        """–ó–∞–±—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏ (–∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É)"""
        if not self.game_active:
            return

        winnings = self.bet_amount * self.multiplier
        self.balance += winnings
        self.display_header()
        print(f"\n–í—ã –∑–∞–±—Ä–∞–ª–∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ —ç—Ç–∞–∂–µ {self.current_floor + 1}!")
        print(f"–í–∞—à –≤—ã–∏–≥—Ä—ã—à: {winnings:.2f} (–º–Ω–æ–∂–∏—Ç–µ–ª—å: {self.multiplier:.1f}x)")
        self.game_active = False
        self.bet_amount = 0

    def main_loop(self):
        """–ì–ª–∞–≤–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª"""
        while True:
            self.display_header()

            if self.balance <= 0:
                print("\nüí∏ –£–≤—ã, —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–µ–Ω—å–≥–∏. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.\n")
                break

            print("\n1. –ò–≥—Ä–∞—Ç—å –≤ '–ë–∞—à–Ω—é'")
            print("2. –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã")
            print("3. –í—ã–π—Ç–∏")

            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")

            if choice == '1':
                self.place_bet()
                self.play_floor()
            elif choice == '2':
                self.display_rules()
            elif choice == '3':
                print("\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                conn = sqlite3.connect('db/project.db')
                cursor = conn.cursor()
                cursor.execute("UPDATE users SET coins = ? WHERE inset = 1", (self.balance,))
                conn.commit()
                break
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


